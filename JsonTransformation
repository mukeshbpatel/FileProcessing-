package com.example.decisiontable.service;

import org.drools.compiler.kie.builder.impl.KieFileSystemImpl;
import org.kie.api.KieBase;
import org.kie.api.KieServices;
import org.kie.api.builder.KieBuilder;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.runtime.KieSession;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class TransformationService {

    public List<Map<String, String>> transform(List<Map<String, String>> inputDataList, MultipartFile[] files) {
        List<Map<String, String>> outputDataList = new ArrayList<>();

        try {
            // Build a KieSession with all uploaded DRL files
            KieSession kieSession = buildKieSession(files);

            // Process each input record
            for (Map<String, String> inputData : inputDataList) {
                Map<String, String> outputData = new HashMap<>();
                kieSession.setGlobal("outputData", outputData);
                kieSession.insert(inputData);
                kieSession.fireAllRules();
                outputDataList.add(outputData);
            }

            kieSession.dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return outputDataList;
    }

    private KieSession buildKieSession(MultipartFile[] files) throws Exception {
        KieServices kieServices = KieServices.Factory.get();
        KieFileSystem kieFileSystem = new KieFileSystemImpl();

        // Load all DRL files into the KieFileSystem
        for (MultipartFile file : files) {
            String drlContent = readFileContent(file);
            String fileName = "src/main/resources/" + file.getOriginalFilename();
            kieFileSystem.write(fileName, drlContent);
        }

        // Build the KieBase
        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem).buildAll();
        if (kieBuilder.getResults().hasMessages(org.kie.api.builder.Message.Level.ERROR)) {
            throw new RuntimeException("Error in DRL files: " + kieBuilder.getResults().getMessages());
        }

        KieBase kieBase = kieServices.newKieContainer(
                kieServices.getRepository().getDefaultReleaseId()).getKieBase();
        return kieBase.newKieSession();
    }

    private String readFileContent(MultipartFile file) throws Exception {
        StringBuilder content = new StringBuilder();
        BufferedReader reader = new BufferedReader(
                new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));
        String line;
        while ((line = reader.readLine()) != null) {
            content.append(line).append("\n");
        }
        return content.toString();
    }
}
