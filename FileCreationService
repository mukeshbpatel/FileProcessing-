import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook; // For .xls files
import org.apache.poi.xssf.usermodel.XSSFWorkbook; // For .xlsx files
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.util.List;
import java.util.Map;

@Service
public class FileCreationService {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final XmlMapper xmlMapper = new XmlMapper();

    /**
     * Creates a file from JSON data based on the specified file type.
     *
     * @param jsonData The JSON data as a string.
     * @param fileType The file type (CSV, XLS, XLSX, XML).
     * @return The file content as a byte array.
     */
    public byte[] createFileFromJson(String jsonData, String fileType) throws IOException {
        List<Map<String, Object>> data = objectMapper.readValue(jsonData, List.class);

        switch (fileType.toLowerCase()) {
            case "csv":
                return createCsvFile(data);
            case "xls":
                return createExcelFile(data, true);
            case "xlsx":
                return createExcelFile(data, false);
            case "xml":
                return createXmlFile(data);
            default:
                throw new IllegalArgumentException("Unsupported file type: " + fileType);
        }
    }

    /**
     * Creates a CSV file from JSON data.
     */
    private byte[] createCsvFile(List<Map<String, Object>> data) throws IOException {
        if (data.isEmpty()) {
            throw new IllegalArgumentException("No data to create CSV file");
        }

        StringWriter writer = new StringWriter();
        CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(data.get(0).keySet().toArray(new String[0]));

        for (Map<String, Object> record : data) {
            csvPrinter.printRecord(record.values());
        }

        csvPrinter.flush();
        return writer.toString().getBytes();
    }

    /**
     * Creates an Excel file from JSON data.
     *
     * @param isXls If true, creates .xls file; otherwise, creates .xlsx file.
     */
    private byte[] createExcelFile(List<Map<String, Object>> data, boolean isXls) throws IOException {
        if (data.isEmpty()) {
            throw new IllegalArgumentException("No data to create Excel file");
        }

        Workbook workbook = isXls ? new HSSFWorkbook() : new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Sheet1");

        // Create header row
        Row headerRow = sheet.createRow(0);
        int colNum = 0;
        for (String header : data.get(0).keySet()) {
            headerRow.createCell(colNum++).setCellValue(header);
        }

        // Create data rows
        int rowNum = 1;
        for (Map<String, Object> record : data) {
            Row row = sheet.createRow(rowNum++);
            colNum = 0;
            for (Object value : record.values()) {
                row.createCell(colNum++).setCellValue(value.toString());
            }
        }

        // Write workbook to byte array
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        workbook.write(outputStream);
        workbook.close();

        return outputStream.toByteArray();
    }

    /**
     * Creates an XML file from JSON data.
     */
    private byte[] createXmlFile(List<Map<String, Object>> data) throws IOException {
        return xmlMapper.writeValueAsBytes(data);
    }
}
