import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook; // For .xls files
import org.apache.poi.xssf.usermodel.XSSFWorkbook; // For .xlsx files
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.*;

@Service
public class FileProcessingService {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final XmlMapper xmlMapper = new XmlMapper();

    // Process CSV file
    public String processCsv(MultipartFile file, List<String> headers) throws IOException {
        List<Map<String, String>> data = new ArrayList<>();
        try (Reader reader = new InputStreamReader(file.getInputStream());
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader())) {
            for (CSVRecord record : csvParser) {
                Map<String, String> row = new HashMap<>();
                for (String header : headers != null ? headers : csvParser.getHeaderNames()) {
                    row.put(header, record.get(header));
                }
                data.add(row);
            }
        }
        return objectMapper.writeValueAsString(data);
    }

    // Process Excel file (supports both .xls and .xlsx)
    public String processExcel(MultipartFile file, List<String> headers) throws IOException {
        List<Map<String, String>> data = new ArrayList<>();
        try (InputStream inputStream = file.getInputStream()) {
            Workbook workbook;

            // Check file extension to determine the workbook type
            String fileName = file.getOriginalFilename();
            if (fileName != null && fileName.endsWith(".xls")) {
                workbook = new HSSFWorkbook(inputStream); // For .xls files
            } else {
                workbook = new XSSFWorkbook(inputStream); // For .xlsx files
            }

            Sheet sheet = workbook.getSheetAt(0);
            Row headerRow = sheet.getRow(0);

            // Determine which headers to extract
            List<String> actualHeaders = new ArrayList<>();
            if (headers != null) {
                for (String header : headers) {
                    for (Cell cell : headerRow) {
                        if (cell.getStringCellValue().equalsIgnoreCase(header)) {
                            actualHeaders.add(header);
                            break;
                        }
                    }
                }
            } else {
                for (Cell cell : headerRow) {
                    actualHeaders.add(cell.getStringCellValue());
                }
            }

            // Extract data based on headers
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                Map<String, String> rowData = new HashMap<>();
                for (String header : actualHeaders) {
                    int columnIndex = -1;
                    for (Cell cell : headerRow) {
                        if (cell.getStringCellValue().equalsIgnoreCase(header)) {
                            columnIndex = cell.getColumnIndex();
                            break;
                        }
                    }
                    if (columnIndex != -1 && row != null) {
                        Cell cell = row.getCell(columnIndex);
                        String value = cell != null ? cell.toString() : "";
                        rowData.put(header, value);
                    }
                }
                data.add(rowData);
            }
        }
        return objectMapper.writeValueAsString(data);
    }

    // Process XML file
    public String processXml(MultipartFile file, List<String> headers) throws IOException {
        try (InputStream inputStream = file.getInputStream()) {
            Map<?, ?> xmlData = xmlMapper.readValue(inputStream, Map.class);

            // Filter XML data based on headers if provided
            if (headers != null) {
                Map<String, Object> filteredData = new HashMap<>();
                for (String header : headers) {
                    if (xmlData.containsKey(header)) {
                        filteredData.put(header, xmlData.get(header));
                    }
                }
                return objectMapper.writeValueAsString(filteredData);
            }
            return objectMapper.writeValueAsString(xmlData);
        }
    }
}
